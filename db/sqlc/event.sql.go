// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: event.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    title, description, start_time, end_time, location, ticket_price, total_tickets, tickets_available, status, event_image
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
         ) RETURNING id, title, description, start_time, end_time, location, ticket_price, total_tickets, tickets_available, status, created_at, event_image, updated_at
`

type CreateEventParams struct {
	Title            string             `json:"title"`
	Description      pgtype.Text        `json:"description"`
	StartTime        pgtype.Timestamptz `json:"start_time"`
	EndTime          pgtype.Timestamptz `json:"end_time"`
	Location         pgtype.Text        `json:"location"`
	TicketPrice      pgtype.Numeric     `json:"ticket_price"`
	TotalTickets     int32              `json:"total_tickets"`
	TicketsAvailable int32              `json:"tickets_available"`
	Status           pgtype.Text        `json:"status"`
	EventImage       pgtype.Text        `json:"event_image"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.Location,
		arg.TicketPrice,
		arg.TotalTickets,
		arg.TicketsAvailable,
		arg.Status,
		arg.EventImage,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.TicketPrice,
		&i.TotalTickets,
		&i.TicketsAvailable,
		&i.Status,
		&i.CreatedAt,
		&i.EventImage,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, title, description, start_time, end_time, location, ticket_price, total_tickets, tickets_available, status, created_at, event_image, updated_at FROM events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.TicketPrice,
		&i.TotalTickets,
		&i.TicketsAvailable,
		&i.Status,
		&i.CreatedAt,
		&i.EventImage,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventForUpdate = `-- name: GetEventForUpdate :one
SELECT id, title, description, start_time, end_time, location, ticket_price, total_tickets, tickets_available, status, created_at, event_image, updated_at FROM events
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetEventForUpdate(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRow(ctx, getEventForUpdate, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.TicketPrice,
		&i.TotalTickets,
		&i.TicketsAvailable,
		&i.Status,
		&i.CreatedAt,
		&i.EventImage,
		&i.UpdatedAt,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, title, description, start_time, end_time, location, ticket_price, total_tickets, tickets_available, status, created_at, event_image, updated_at FROM events
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.TicketPrice,
			&i.TotalTickets,
			&i.TicketsAvailable,
			&i.Status,
			&i.CreatedAt,
			&i.EventImage,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET
    title        = COALESCE($1, title),
    description  = COALESCE($2, description),
    start_time   = COALESCE($3, start_time),
    end_time     = COALESCE($4, end_time),
    location     = COALESCE($5, location),
    ticket_price = COALESCE($6, ticket_price),
    status       = COALESCE($7, status),
    event_image  = COALESCE($8, event_image),
    updated_at   = now()
WHERE id = $9
RETURNING id, title, description, start_time, end_time, location, ticket_price, total_tickets, tickets_available, status, created_at, event_image, updated_at
`

type UpdateEventParams struct {
	Title       pgtype.Text        `json:"title"`
	Description pgtype.Text        `json:"description"`
	StartTime   pgtype.Timestamptz `json:"start_time"`
	EndTime     pgtype.Timestamptz `json:"end_time"`
	Location    pgtype.Text        `json:"location"`
	TicketPrice pgtype.Numeric     `json:"ticket_price"`
	Status      pgtype.Text        `json:"status"`
	EventImage  pgtype.Text        `json:"event_image"`
	ID          int64              `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
		arg.Location,
		arg.TicketPrice,
		arg.Status,
		arg.EventImage,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.TicketPrice,
		&i.TotalTickets,
		&i.TicketsAvailable,
		&i.Status,
		&i.CreatedAt,
		&i.EventImage,
		&i.UpdatedAt,
	)
	return i, err
}
