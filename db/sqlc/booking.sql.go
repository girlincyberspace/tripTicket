// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: booking.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (
    user_id, event_id, tickets, total_price, booking_status
) VALUES (
            $1, $2, $3, $4, $5
         ) RETURNING id, user_id, event_id, tickets, total_price, booking_status, created_at
`

type CreateBookingParams struct {
	UserID        int64          `json:"user_id"`
	EventID       int64          `json:"event_id"`
	Tickets       int32          `json:"tickets"`
	TotalPrice    pgtype.Numeric `json:"total_price"`
	BookingStatus pgtype.Text    `json:"booking_status"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.UserID,
		arg.EventID,
		arg.Tickets,
		arg.TotalPrice,
		arg.BookingStatus,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Tickets,
		&i.TotalPrice,
		&i.BookingStatus,
		&i.CreatedAt,
	)
	return i, err
}

const getBooking = `-- name: GetBooking :one
SELECT id, user_id, event_id, tickets, total_price, booking_status, created_at FROM bookings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBooking(ctx context.Context, id int64) (Booking, error) {
	row := q.db.QueryRow(ctx, getBooking, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Tickets,
		&i.TotalPrice,
		&i.BookingStatus,
		&i.CreatedAt,
	)
	return i, err
}

const listBooking = `-- name: ListBooking :many
SELECT id, user_id, event_id, tickets, total_price, booking_status, created_at FROM bookings
WHERE user_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type ListBookingParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBooking(ctx context.Context, arg ListBookingParams) ([]Booking, error) {
	rows, err := q.db.Query(ctx, listBooking, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventID,
			&i.Tickets,
			&i.TotalPrice,
			&i.BookingStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
