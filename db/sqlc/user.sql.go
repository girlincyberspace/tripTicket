// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, email, password_hash, role
) VALUES (
             $1, $2, $3, $4
         ) RETURNING id, username, email, password_hash, role, created_at, password_changed_at
`

type CreateUserParams struct {
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	Role         pgtype.Text `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password_hash, role, created_at, password_changed_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    password_hash = COALESCE($1, password_hash),
    username = COALESCE($2, username),
    email = COALESCE($3, email),
    password_changed_at = COALESCE($4, password_changed_at)
WHERE
    username = $2
RETURNING id, username, email, password_hash, role, created_at, password_changed_at
`

type UpdateUserParams struct {
	PasswordHash      pgtype.Text      `json:"password_hash"`
	Username          pgtype.Text      `json:"username"`
	Email             pgtype.Text      `json:"email"`
	PasswordChangedAt pgtype.Timestamp `json:"password_changed_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.PasswordHash,
		arg.Username,
		arg.Email,
		arg.PasswordChangedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}
